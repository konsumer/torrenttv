var stream = require('stream')
  , util = require('util')
  ;

var ERROR = new Error('Faux Request Error');

var response = {
  statusCode: 200,
  body: global.body || ''
};

function Request (options) {
  var self = this;
  this.response = response;
  stream.Stream.call(this);
  this.readable = true;
  this.writable = true;
  process.nextTick(function () {
    if (options.fail) {
      if (options.callback) {
        options.callback(ERROR);
      } else {
        self.emit('error', ERROR);
      }
    } else {
      // console.log(options);
      if (options.body) {
        response.body = options.body;
      }
      if (options.callback) {
        options.callback(null, response, response.body);
      } else {
        self.emit('response', response);
        self.emit('complete', response, response.body);
        self.end(response.body, 'utf8');
      }
    }
  });
}
util.inherits(Request, stream.Stream);

// Stream API
Request.prototype.pipe = function (dest, opts) {
  stream.Stream.prototype.pipe.call(this, dest, opts);
  return dest;
}
Request.prototype.pause = function () {
  this.response.pause.apply(this.response, arguments)
}
Request.prototype.resume = function () {
  this.response.resume.apply(this.response, arguments);
}
Request.prototype.destroy = function () {
  this.end();
}

function request (uri, options, callback) {
  console.log(options);
  if (typeof uri === 'undefined') throw new Error('undefined is not a valid uri or options object.');
  if ((typeof options === 'function') && !callback) callback = options;
  if (options && typeof options === 'object') {
    options.uri = uri;
  } else if (typeof uri === 'string') {
    options = {uri:uri};
  } else {
    options = uri;
  }

  options.fail = global.fail || true;

  if (callback) options.callback = callback;
  var r = new Request(options);
  return r;
}

module.exports = request;