{
  "name": "nt",
  "description": "Read, make, write, and hash check torrent files",
  "keywords": [
    "torrent",
    "bittorremt",
    "file"
  ],
  "version": "0.3.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/fent/node-torrent.git"
  },
  "author": {
    "name": "Roly Fentanes",
    "url": "https://github.com/fent"
  },
  "main": "./lib/index.js",
  "bin": {
    "nt": "./bin/nt"
  },
  "directories": {
    "lib": "./lib"
  },
  "scripts": {
    "test": "vows test/*-test.js --spec"
  },
  "dependencies": {
    "bncode": "0.2.x",
    "buffers": "0.1.x",
    "nomnom": "1.5.x",
    "colors": "0.5.x",
    "async": "0.1.x",
    "request": "2.9.x",
    "underscore": "1.3.x",
    "memorystream": "0.2.x",
    "ordered-emitter": "0.1.x",
    "streamspeed": "0.1.x"
  },
  "devDependencies": {
    "vows": "0.5.x",
    "nock": "0.2.x"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/fent/node-torrent/raw/master/LICENSE"
    }
  ],
  "readme": "# node-torrent [![Build Status](https://secure.travis-ci.org/fent/node-torrent.png)](http://travis-ci.org/fent/node-torrent)\n\nRead, make, and hash check torrents with node.js!\n\n# Usage\n\n## Read a torrent\n\n```javascript\nvar nt = require('nt');\n\nnt.read('path/to/file.torrent', function(err, torrent) {\n  if (err) throw err;\n  console.log('Info hash:', torrent.infoHash());\n});\n\n\n// if url is given, it will be downloaded\nnt.read('http://torrents.me/download.php?id=2342', function(err, torrent) {\n  if (err) throw err;\n  console.log(torrent.metadata);\n});\n```\n\n## Make a torrent\n\n```javascript\nvar rs = nt.make('http://myannounce.net/url', __dirname + '/files');\nrs.pipe(fs.createWriteStream('mytorrent.torrent'));\n\n// callback style\nnt.makeWrite('outputfile', 'http://announce.me', __dirname + '/files',\n  ['somefile.ext', 'another.one', 'inside/afolder.mkv', 'afolder'],\n  function(err, torrent) {\n    if (err) throw err;\n    console.log('Finished writing torrent!');\n  });\n```\n\n## Hash check a torrent\n\n```js\nvar hasher = nt.hashCheck(file);\n\nvar p;\nhahser.on('match', function(i, hash, percent) {\n  p = percent;\n});\n\nhasher.on('end', function() {\n  console.log('Hash Check:', p + '%', 'matched');\n});\n```\n\n\n# API\n\n### read(file, [requestOptions], callback(err, Torrent))\n\nReads a local file, remote file, or a readable stream. If `file` is a URL, it will be downloaded. `requestOptions` is optional, and can be used to customize the http request made by [request](https://github.com/mikeal/request). Returns readable stream.\n\n### readURL(url, [requestOptions], callback(err, Torrent))\n\nDownloads a torrent from a URL. `requestOptions` optionally can be used to customize the request. Returns readable stream.\n\n### readFile(file, callback(err, Torrent))\n\nReads a torrent file. Returns readable stream.\n\n### readStream(readstream, callback(err, Torrent))\n\nReads torrent data from a readable stream. Returns the readable stream.\n\n### readRaw(data, callback(err, Torrent))\n\nParses raw torrent data. `data` must be a buffer.\n\nAn error can be returned if the torrent is formatted incorrectly. Does not check if the dictonaries are listed alphabetically. Refer to the [BitTorrent Specification](http://wiki.theory.org/BitTorrentSpecification) for more info on torrent metainfo.\n\n### make(announceURL, dir, [files], [options], [callback(err, Torrent)])\n\nMakes a new torrent. `dir` is root directory of the torrent. The `files` array will relatively read files from there. If files is omitted, it implicitly adds all of the files in `dir` to the torrent, including those in subdirectories. `options` can have the following:\n\n* `announceList` - An array of arrays of additional announce URLs.\n* `comment`\n* `name` - Can be used only in multi file mode. If not given, defaults to name of directory.\n* `pieceLength` - How to break up the pieces. Must be an integer `n` that says piece length will be `2^n`. Default is 256KB, or 2^18.\n* `private` - Set true if this is a private torrent.\n* `source` - This goes into the `info` dictionary of the torrent. Useful if you want to make a torrent have a unique info hash from a certain tracker.\n* `maxFiles` - Max files to open during piece hashing. Defaults to 250.\n\n`callback` is called with a possible `err`, and a `Torrent` object when hashing is finished.\n\n`make` returns a Hasher object that emits raw bencoded `data` events.\n\n### makeWrite(output, annlounce, dir, [files], [options], [callback(err, torrent)])\n\nA shortcut that pumps the returned readable stream from `make` into a writable stream that points to the file `output`. Returns a Hasher object.\n\n\n## Torrent\n\nThe `read` and `make` functions all call their callback with a Torrent object.\n\n### Torrent#metadata\n\nContains metadata of the torrent. Example:\n\n```js\n{\n  announce: 'udp://tracker.publicbt.com:80',\n  'announce-list': [\n    [ 'udp://tracker.publicbt.com:80' ],\n    [ 'udp://tracker.ccc.de:80' ],\n    [ 'udp://tracker.openbittorrent.com:80' ],\n    [ 'http://tracker.thepiratebay.org/announce' ]\n  ],\n  comment: 'Torrent downloaded from http://thepiratebay.org',\n  'creation date': 1303979726,\n  info: { length: 718583808,\n    name: 'ubuntu-11.04-desktop-i386.iso',\n    'piece length': 524288,\n    pieces: <Buffer e5 7a ...>\n  }\n}\n```\n\n### Torrent#infoHash()\n\nGet a torrent's info hash.\n\n### Torrent#createReadStream()\n\nCreates a ReadableStream that emits raw bencoded data for this torrent. Returns the readable stream.\n\n### Torrent#createWriteStream(filepath)\n\nShortcut that pipes the stream from `Torrent#createReadStream()` to a WritableStream. Returns the readable stream.\n\n### Torrent#hashCheck(dir, [options])\n\nHash checks torrent against files in `dir`. Returns a Hasher object. `options` hash can have `maxFiles` to open during hashing. Defaults to `250`. Returns a Hasher object.\n\n\n## Hasher\n\nA Hasher object is returned when a torrent is created with `make` and when a torrent is hash checked with `hashCheck` or `Torrent#hashCheck`. It inherits from ReadableStream.\n\n### Hasher#pause()\n\nPause hash checking.\n\n### Hasher#resume()\n\nResumes hash checking.\n\n### Hasher#toggle()\n\nContinues hashing if paused or pauses if not\n\n### Hasher#destroy()\n\nStops hashing completely. Closes file descriptors and does not emit any more events.\n\n### Events:\n\n* 'ready' `function () { }`\n\nFinished examining files to be hashed and ready to start hashing their contents.\n\n* 'data', `function (data) { }`\n\nEmits raw bencoded torrent data only when hasher is returned from the `make` function.\n\n* 'progress' `function (percent, speed, avgSpeed) { }`\n\nEmits the progress calculated by amount of bytes read from files. `speed` and `avgSpeed` are in bytes.\n\n* 'hash' `function (index, hash, file, position, length) { }`\n\nEmitted when a piece is hashed along with hash position and source.\n\n* 'match' `function (index, hash, percentMatched, file, position, length) { }`\n\nEmitted when a piece matches with its `index`, the piece, and the percentage of pieces matched so far.\n\n* 'matcherror' `function (index, file, position, length) { }`\n\nEmitted when a piece does not match.\n\n* 'error' `function (err) { }`\n\nError hash checking.\n\n* 'end' `function () { }`\n\nHash checking is finished.\n\n\n# Command Line\n\nnt can be ran from the command line too! Install it with the `-g` flag with npm and use it with the command `nt`.\n\n![example img](http://i.imgur.com/y47Sc.png)\n\n\n# Install\n\n```bash\nnpm -g install nt\n```\n\n\n# Tests\nTests are written with [vows](http://vowsjs.org/)\n\n```bash\nnpm test\n```\n\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "nt@0.3.0",
  "dist": {
    "shasum": "d8d56da2a80ec5e44f50039dc6cced39b2f3f6b8"
  },
  "_from": "nt@"
}
