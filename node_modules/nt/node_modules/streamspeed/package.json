{
  "name": "streamspeed",
  "description": "Easily measure the speed of your streams.",
  "keywords": [
    "stream",
    "speed"
  ],
  "version": "0.1.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/fent/node-streamspeed.git"
  },
  "author": {
    "name": "Roly Fentanes",
    "url": "https://github.com/fent"
  },
  "main": "./lib/index.js",
  "scripts": {
    "test": "mocha -R spec test/*-test.js"
  },
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": "*"
  },
  "devDependencies": {
    "mocha": "0.8.x"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/fent/node-streamspeed/raw/master/LICENSE"
    }
  ],
  "readme": "# streamspeed [![Build Status](https://secure.travis-ci.org/fent/node-streamspeed.png)](http://travis-ci.org/fent/node-streamspeed)\n\nA simple way to keep track of the speed of your node streams.\n\n# Usage\n\n```js\nvar streamspeed = require('streamspeed');\n\nvar rs = fs.createReadStream('somefile.avi');\nstreamspeed.watch(rs);\n\n// liten for events emitted by streamspeed\nrs.on('readspeed', function(speed, avgSpeed) {\n  console.log('Reading at', speed, 'bytes per second');\n});\n\nvar ws = fs.createWriteStream('filecopy.avi');\nstreamspeed.watch(ws);\n\nws.on('writespeed', function(speed, avg) {\n  // comes with convenient function for humans!\n  console.log('Average write speed:', streamspeed.toHuman(avg));\n});\n```\n\nKeep track of even a group of streams easily.\n\n```js\nvar group = streamspeed.createGroup();\ngroup.add(stream1);\ngroup.add(stream2);\ngroup.add(stream3);\n\ngroup.on('readspeed', function(speed, avg) {\n  console.log('now reading at', speed, 'bps');\n});\n\ngroup.on('writespeed', function(speed, avg) {\n  console.log('now writing at', speed, 'bps');\n});\n```\n\n![example img](http://i.imgur.com/y47Sc.png)\n\n# API\n### watch(stream, timeUnit)\nWatches `stream` for any `data` events or calls to `write` and emits the following events\n\n* 'readinfo' `function (speed, avgSpeed) { }`\n* 'writespeed' `function (speed, avgSpeed) { }`\n\nThe events will be emitted before the 2nd `data` event or call to `write()`. And after the 2nd time, will only be emitted if there is a change to `speed` or `avgSpeed`. `timeUnit` defaults to 1000 for 1 second. Can be used to get the speed at a different time rate like 1 for `speed` per millisecond.\n\n### unwatch(stream)\nUnwatches `stream`. Stops emitting speed events. `unwatch` will be called on a watched stream if it emits an `end` or `error` event, on both individual streams and groups.\n\n### toHuman(bytes, timeUnit)\nConvenient method to convert `bytes` to a human readable string.\n\n```js\nstreamspeed.toHuman(1500); // 1.46KB\nstreamspeed.toHuman(1024 * 1024) => 1MB\nstreamspeed.toHuman(1024 * 1024 * 20.5, 's') => 20.5MB/s\n```\n\n### Group(timeUnit)\nA group that can be used to watch several streams. Will emit `readspeed` and `writespeed`.\n\n### Group#watch(stream)\nAdd `stream` to group.\n\n### Group#unwatch(stream)\nRemove `stream` from group.\n\n### Group#getStreams()\nConvenient method that returns a list of all streams in the group.\n\n\n# Install\n\n    npm install streamspeed\n\n\n# Tests\nTests are written with [mocha](http://visionmedia.github.com/mocha/)\n\n```bash\nnpm test\n```\n\n# License\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "streamspeed@0.1.3",
  "dist": {
    "shasum": "a2ba83df71cf0aacc7d9cbb286494030dd71c911"
  },
  "_from": "streamspeed@0.1.x"
}
