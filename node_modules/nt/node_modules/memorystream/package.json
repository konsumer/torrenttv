{
  "name": "memorystream",
  "description": "This is lightweight memory stream module for node.js.",
  "version": "0.2.0",
  "keywords": [
    "memory",
    "test",
    "stream",
    "tools",
    "streams"
  ],
  "devDependencies": {
    "expresso": ">=0.7.x",
    "jslint": "*"
  },
  "author": {
    "name": "Dmitry Nizovtsev",
    "url": "https://github.com/JSBizon"
  },
  "contributors": [
    {
      "name": "Dmitry Nizovtsev",
      "email": "dmitryp3@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/JSBizon/node-memorystream.git"
  },
  "homepage": "https://github.com/JSBizon/node-memorystream",
  "engines": {
    "node": ">= 0.3.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/JSBizon/node-memorystream/raw/master/LICENSE"
    }
  ],
  "readme": "# Introduction\nnode-memorystream - this module allow create streams in memory. It can be used for emulating file streams, filtering/mutating data between one stream and another, buffering incoming data, being the gap between two data/network streams of variable rates, etc. MemoryStream support read/write states or only read state or only write state. The API is meant to follow node's Stream implementation.\n\nOriginal module is here git://github.com/ollym/memstream.git was remade and improved. \n\n## Installation\nIf you have npm installed, you can simply type:\n\n\tnpm install memorystream\n\t\nOr you can clone this repository using the git command:\n\n\tgit clone git://github.com/JSBizon/node-memorystream.git\n\t\n## Usage\nSome examples how to use memorystream module.\n\n#### Basic I/O Operation\nIn this example I illustrate the basic I/O operations of the memory stream.\n\n\tvar MemoryStream = require('memorystream');\n\tvar memStream = new MemoryStream(['Hello',' ']);\n\t\n\tvar data = '';\n\tmemStream.on('data', function(chunk) {\n\t\tdata += chunk.toString();\n\t});\n\t\n\tmemStream.write('World');\n\t\n\tmemStream.on('end', function() {\n\t\t// outputs 'Hello World!'\n\t\tconsole.log(data);\n\t});\n\tmemStream.end('!');\n\t\n#### Piping\nIn this example I'm piping all data from the memory stream to the process's stdout stream.\n\n\tvar MemoryStream = require('memorystream');\n\tvar memStream = new MemoryStream();\n\tmemStream.pipe(process.stdout, { end: false });\n\t\n\tmemStream.write('Hello World!');\n\t\nIn this example I'm piping all data from the response stream to the memory stream.\n\n\tvar http = require('http'),\n\t\tMemoryStream = require('memorystream');\n\n\tvar options = {\n\t\thost: 'google.com'\n\t};\n\tvar memStream = new MemoryStream(null, {\n\t\treadable : false\n\t});\n\n\tvar req = http.get(options, function(res) {\n\t\tres.pipe(memStream);\n\t\tres.on('end', function() {\n\t\t\tconsole.log(memStream.toString());\n\t\t});\n\t});\n\n#### Delayed Response\nIn the example below, we first pause the stream before writing the data to it. The stream is then resumed after 1 second, and the data is written to the console.\n\n\tvar MemoryStream = require('memorystream');\n\n\tvar memStream = new MemoryStream('Hello');\n\tvar data = '';\n\tmemStream.on('data', function(chunk) {\n\t\tdata += chunk;\n\t});\n\t\n\tmemStream.pause();\n\tmemStream.write('World!');\n\t\n\tsetTimeout(function() {\n\t\tmemStream.resume();\n\t}, 1000);\n\n## Documentation\nThe memory stream adopts all the same methods and events as node's Stream implementation.\nDocumentation is [available here](http://github.com/JSBizon/node-memorystream/wiki/API/ \"Documentation\").\n\n\n\n\t",
  "readmeFilename": "README.md",
  "_id": "memorystream@0.2.0",
  "dist": {
    "shasum": "1d4be27264e7790eb5e228f37d94b80432411f08"
  },
  "_from": "memorystream@0.2.x"
}
